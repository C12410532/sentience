#summary Modelling space probabilistically

  #  [OccupancyGridIntroduction Introduction]
  #  [OccupancyGridStorage Storage]


=== Introduction ===

An _occupancy grid_ is a typically a two or three dimensional grid divided up into small square or cubic units known as _cells_ or _voxels_.  Each cell within the grid stores a value which represents the probability of it being occupied (a positive value) or empty (a negative value).  Cells may also contain additional information such as the average observed colour.

3D occupancy grids are the most effective method for representing physical space at a reasonably high resolution.  Even though the sensor readings used to update the grid may be noisy and contain inaccuracies, over time because of the probabilistic nature of the way grid cells are updated the truth accumulates and inconsistencies cancel out.

Early efforts using the [http://sluggish.uni.cc/sentience/sentience.htm Sentience project] concentrated upon building grids modelling the space within a short range of the robot, in order to facilitate object recognition.  More recent work is aimed at building maps suitable for mobile robot navigation and detection of large objects such as chairs and tables.

The stages involved in creating an occupancy grid are as follows:

  #  Grab images from cameras
  #  Perform [ImageRectification rectification] to remove distortion due to the shape of the camera lenses
  #  Perform dense stereo correspondence to calculate a [DisparityMap depth map]
  #  For each disparity create a ray of light using an appropriate [StereoSensorModel sensor model] and insert it into the grid, taking into account the position and orientation of the robot
  #  Continue updating the grid over time as the robot accumulates experience of its surroundings

The hallway image sequence below, which is actually a sequence of stereo images rather than the monoscopic view shown, is turned into a 3D volumetric model which may then be viewed from different angles.

[http://static.flickr.com/119/316416417_aec21a9bff_o.gif]
[http://static.flickr.com/103/316416421_1117860e57.jpg]

The blue area in the image above represents unoccupied vacant space at floor level, and the side walls and doorways can be seen.

[http://farm1.static.flickr.com/134/319594099_71623e87ed_o.gif]

=== Occupancy Grid Storage ===

There's no escaping the fact that occupancy grids can consume a fair amount of space both in terms of memory and disk storage.  However, we can use some tricks to ensure that use of storage space is as efficient as possible.  

I assume that most robots in the not too distant future will be equipped with solid state storage, such as flash disks, but for the present hard disk usage is still common and relatively inexpensive.  Hard disks work well in mobile devices (for example iPods), but the inevitable _rough and tumble_ of robotic excursions means that they will receive unexpected physical shocks which can cause the read/write head of the drive to "crash" into the surface of the spinning disk, which may either destroy the device or result in serious data loss.  Physical measures can be taken to protect hard disks from high deceleration forces, but from my own personal experiences even packing them in foam or mounting them onto flexible rubber buffers is not always enough.

It's therefore essential that any robotics software running on contemporary storage devices tries to minimise the amount of time that the hard disk is exposed to the potential risk of a head crash.  This means writing the software in such a way as to reduce disk access to the bare minimum.  An additional beneficial side effect is that smaller storage devices may be used (hence making the system more amenable to using solid state storage) and much large occupancy grids can be stored efficiently.

We can compress a 3D occupancy grid in two ways.  Firstly, by using an efficient coding format which only stores information about cells which have occupancy or vacancy evidence associated with them, and secondly by using already available off-the-shelf data compression algorithms.

=== Binary indexing ===

Within any occupancy grid it is to be expected that a significant fraction of the cells will not be observed by the robot and therefore contain no useful information.  By using a binary index on the grid we can represent the state of each cell and whether it contains any evidence using a single boolean value (one bit per cell).  After the initial index we then store the occupancy and colour evidence.  Within a typical grid this method alone gives a substantial memory and disk space saving.

=== Algorithmic compression ===

In addition to indexing we can also compress the grid data using standard methods so that grids may be stored and retrieved either from memory or permanent storage in a compact fashion.  This ensures that hardly any time is spent doing disk I/O which is relatively sluggish compared to in-memory access times.

To achieve this I have used the [http://www.codeproject.com/useritems/IMCompressor.asp compression system written by Andrey Dryazgov].  Using this system on a test data set gives a significant improvement in storage efficiency, reducing a 3D grid roughly 3.5MB in size (in binary indexed format) down to a mere 230K.  Obviously the number of such grids which could be stored, even on a modest flash disk, is considerable and should easily be adequate to cover a typical home or office area at a high spatial resolution.